{"name": "Проверка перехода к разделу  \"История заказов\" под пользователями: без заказов и с заказами", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message:", "trace": "self = <tests.test_account_page.TestAccountPage object at 0x0000013F430CD1C0>\nmain_page = <pages.main_page.MainPage object at 0x0000013F430FF110>\naccount_page = <pages.account_page.AccountPage object at 0x0000013F430FDA00>, customer = 'customer_authorized'\nrequest = <FixtureRequest for <Function test_transition_order_history[firefox-customer_authorized]>>\n\n    @allure.title('Проверка перехода к разделу  \"История заказов\" под пользователями: без заказов и с заказами')\n    @allure.description('Открываем сайт, переходим на страницу входа и логинимся. нажимаем кнопку \"Личный кабинет\" и переходим на вкладку \"История заказов\". Проверяем наличие контейнера заказов')\n    @pytest.mark.parametrize('customer', ['response_customer', 'customer_authorized'])\n    def test_transition_order_history(self, main_page, account_page, customer, request):\n>       response_fixture = request.getfixturevalue(customer)  # преобразовываем фикстуру\n\ntests\\test_account_page.py:27: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nvenv\\Lib\\site-packages\\_pytest\\fixtures.py:531: in getfixturevalue\n    fixturedef = self._get_active_fixturedef(argname)\nvenv\\Lib\\site-packages\\_pytest\\fixtures.py:616: in _get_active_fixturedef\n    fixturedef.execute(request=subrequest)\nvenv\\Lib\\site-packages\\_pytest\\fixtures.py:1090: in execute\n    result = ihook.pytest_fixture_setup(fixturedef=self, request=request)\nvenv\\Lib\\site-packages\\pluggy\\_hooks.py:513: in __call__\n    return self._hookexec(self.name, self._hookimpls.copy(), kwargs, firstresult)\nvenv\\Lib\\site-packages\\pluggy\\_manager.py:120: in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\nvenv\\Lib\\site-packages\\_pytest\\setuponly.py:36: in pytest_fixture_setup\n    return (yield)\nvenv\\Lib\\site-packages\\_pytest\\fixtures.py:1139: in pytest_fixture_setup\n    result = call_fixture_func(fixturefunc, request, kwargs)\nvenv\\Lib\\site-packages\\_pytest\\fixtures.py:890: in call_fixture_func\n    fixture_result = next(generator)\nconftest.py:80: in customer_authorized\n    main_page.registration_order()\npages\\main_page.py:61: in registration_order\n    self.order_formation()\npages\\main_page.py:51: in order_formation\n    self.waiting_for_text_to_change(MainPageLocators.NUMBER_ORDER, number)\npages\\base_page.py:25: in waiting_for_text_to_change\n    WebDriverWait(self.driver, PAUSE).until_not((expected_conditions.text_to_be_present_in_element(locator, text)))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"11002d42-dbe8-4920-a288-b93d132da8bc\")>\nmethod = <function text_to_be_present_in_element.<locals>._predicate at 0x0000013F430DE7A0>, message = ''\n\n    def until_not(self, method: Callable[[D], T], message: str = \"\") -> Union[T, Literal[True]]:\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value evaluates to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`, or\n                  ``True`` if `method` has raised one of the ignored exceptions\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if not value:\n                    return value\n            except self._ignored_exceptions:\n                return True\n            time.sleep(self._poll)\n            if time.monotonic() > end_time:\n                break\n>       raise TimeoutException(message)\nE       selenium.common.exceptions.TimeoutException: Message:\n\nvenv\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:128: TimeoutException"}, "description": "Открываем сайт, переходим на страницу входа и логинимся. нажимаем кнопку \"Личный кабинет\" и переходим на вкладку \"История заказов\". Проверяем наличие контейнера заказов", "attachments": [{"name": "log", "source": "828675bb-ef81-4bbf-8881-33728e2cbd99-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "driver", "value": "'firefox'"}, {"name": "customer", "value": "'customer_authorized'"}], "start": 1726550231695, "stop": 1726550252541, "uuid": "ee2f9418-ca07-4372-8b5b-d688b1c6904e", "historyId": "993bb5ce564f40e8d4fe022c731e70bd", "testCaseId": "106f9cff248f86c186ec3db8a890e3eb", "fullName": "tests.test_account_page.TestAccountPage#test_transition_order_history", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_account_page"}, {"name": "subSuite", "value": "TestAccountPage"}, {"name": "host", "value": "DESKTOP-Q7I2UDM"}, {"name": "thread", "value": "21020-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_account_page"}]}