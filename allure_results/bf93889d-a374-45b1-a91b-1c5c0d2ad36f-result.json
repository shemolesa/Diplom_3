{"name": "Проверка отображения заказов из истории в ленте", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message:", "trace": "account_page = <pages.account_page.AccountPage object at 0x0000013F40A1FD10>\nmain_page = <pages.main_page.MainPage object at 0x0000013F40A1EC60>\n\n    @allure.step('Регистрация нового тестового покупателя, авторизация, формирование заказов и последующее удаление')\n    @pytest.fixture()\n    def customer_authorized(account_page, main_page):\n        # генерируем данные покупателя\n        payload = generate_data_customer()\n        # отправляем запрос на регистрацию тестового покупателя и сохраняем ответ в переменную\n        response = requests.post(URL_CUSTOMER_REG, data=payload)\n        # получаем токен пользователя\n        access_token = response.json()['accessToken']\n        account_page.login_customer(payload)\n>       main_page.registration_order()\n\nconftest.py:80: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages\\main_page.py:61: in registration_order\n    self.order_formation()\npages\\main_page.py:51: in order_formation\n    self.waiting_for_text_to_change(MainPageLocators.NUMBER_ORDER, number)\npages\\base_page.py:25: in waiting_for_text_to_change\n    WebDriverWait(self.driver, PAUSE).until_not((expected_conditions.text_to_be_present_in_element(locator, text)))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"607eb663-cbcb-45ec-8e42-191a2b88f9a2\")>\nmethod = <function text_to_be_present_in_element.<locals>._predicate at 0x0000013F430DE020>, message = ''\n\n    def until_not(self, method: Callable[[D], T], message: str = \"\") -> Union[T, Literal[True]]:\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value evaluates to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`, or\n                  ``True`` if `method` has raised one of the ignored exceptions\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if not value:\n                    return value\n            except self._ignored_exceptions:\n                return True\n            time.sleep(self._poll)\n            if time.monotonic() > end_time:\n                break\n>       raise TimeoutException(message)\nE       selenium.common.exceptions.TimeoutException: Message:\n\nvenv\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:128: TimeoutException"}, "description": "В истории заказов получаем номера заказов, переходим в ленту заказов и проверяем их наличие", "attachments": [{"name": "log", "source": "f2436cbb-6077-436c-96d7-c698c8bb059e-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "driver", "value": "'firefox'"}], "start": 1726550470024, "stop": 1726550470024, "uuid": "659029f4-197a-4ff1-96ca-c999abe099e3", "historyId": "a75e6a43f9c7c161b974e9bd12144251", "testCaseId": "4b50866b5e89399e4385f2c6c08229f0", "fullName": "tests.test_feed_page.TestFeedPage#test_view_order_in_feed", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_feed_page"}, {"name": "subSuite", "value": "TestFeedPage"}, {"name": "host", "value": "DESKTOP-Q7I2UDM"}, {"name": "thread", "value": "21020-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_feed_page"}]}